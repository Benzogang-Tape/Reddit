// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jwt "github.com/Benzogang-Tape/Reddit/internal/models/jwt"
	users "github.com/Benzogang-Tape/Reddit/internal/models/users"
	gomock "github.com/golang/mock/gomock"
)

// MockUserAPI is a mock of UserAPI interface.
type MockUserAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUserAPIMockRecorder
}

// MockUserAPIMockRecorder is the mock recorder for MockUserAPI.
type MockUserAPIMockRecorder struct {
	mock *MockUserAPI
}

// NewMockUserAPI creates a new mock instance.
func NewMockUserAPI(ctrl *gomock.Controller) *MockUserAPI {
	mock := &MockUserAPI{ctrl: ctrl}
	mock.recorder = &MockUserAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAPI) EXPECT() *MockUserAPIMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockUserAPI) Authorize(ctx context.Context, authData users.AuthUserInfo) (*jwt.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, authData)
	ret0, _ := ret[0].(*jwt.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockUserAPIMockRecorder) Authorize(ctx, authData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUserAPI)(nil).Authorize), ctx, authData)
}

// Register mocks base method.
func (m *MockUserAPI) Register(ctx context.Context, authData users.AuthUserInfo) (*jwt.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, authData)
	ret0, _ := ret[0].(*jwt.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserAPIMockRecorder) Register(ctx, authData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserAPI)(nil).Register), ctx, authData)
}
