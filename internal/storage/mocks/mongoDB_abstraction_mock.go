// Code generated by MockGen. DO NOT EDIT.
// Source: mongoDB_abstraction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/Benzogang-Tape/Reddit/internal/storage"
	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockAbstractCollection is a mock of AbstractCollection interface.
type MockAbstractCollection struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractCollectionMockRecorder
}

// MockAbstractCollectionMockRecorder is the mock recorder for MockAbstractCollection.
type MockAbstractCollectionMockRecorder struct {
	mock *MockAbstractCollection
}

// NewMockAbstractCollection creates a new mock instance.
func NewMockAbstractCollection(ctrl *gomock.Controller) *MockAbstractCollection {
	mock := &MockAbstractCollection{ctrl: ctrl}
	mock.recorder = &MockAbstractCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractCollection) EXPECT() *MockAbstractCollectionMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockAbstractCollection) DeleteOne(ctx context.Context, filter any, opts ...*options.DeleteOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockAbstractCollectionMockRecorder) DeleteOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockAbstractCollection)(nil).DeleteOne), varargs...)
}

// Find mocks base method.
func (m *MockAbstractCollection) Find(ctx context.Context, filter any, opts ...*options.FindOptions) (storage.AbstractCursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(storage.AbstractCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAbstractCollectionMockRecorder) Find(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAbstractCollection)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockAbstractCollection) FindOne(ctx context.Context, filter any, opts ...*options.FindOneOptions) storage.AbstractSingleResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(storage.AbstractSingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockAbstractCollectionMockRecorder) FindOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockAbstractCollection)(nil).FindOne), varargs...)
}

// InsertOne mocks base method.
func (m *MockAbstractCollection) InsertOne(ctx context.Context, document any, opts ...*options.InsertOneOptions) (any, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockAbstractCollectionMockRecorder) InsertOne(ctx, document interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockAbstractCollection)(nil).InsertOne), varargs...)
}

// UpdateOne mocks base method.
func (m *MockAbstractCollection) UpdateOne(ctx context.Context, filter, update any, opts ...*options.UpdateOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockAbstractCollectionMockRecorder) UpdateOne(ctx, filter, update interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockAbstractCollection)(nil).UpdateOne), varargs...)
}

// MockAbstractCursor is a mock of AbstractCursor interface.
type MockAbstractCursor struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractCursorMockRecorder
}

// MockAbstractCursorMockRecorder is the mock recorder for MockAbstractCursor.
type MockAbstractCursorMockRecorder struct {
	mock *MockAbstractCursor
}

// NewMockAbstractCursor creates a new mock instance.
func NewMockAbstractCursor(ctrl *gomock.Controller) *MockAbstractCursor {
	mock := &MockAbstractCursor{ctrl: ctrl}
	mock.recorder = &MockAbstractCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractCursor) EXPECT() *MockAbstractCursorMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAbstractCursor) All(ctx context.Context, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockAbstractCursorMockRecorder) All(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAbstractCursor)(nil).All), ctx, result)
}

// MockAbstractSingleResult is a mock of AbstractSingleResult interface.
type MockAbstractSingleResult struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractSingleResultMockRecorder
}

// MockAbstractSingleResultMockRecorder is the mock recorder for MockAbstractSingleResult.
type MockAbstractSingleResultMockRecorder struct {
	mock *MockAbstractSingleResult
}

// NewMockAbstractSingleResult creates a new mock instance.
func NewMockAbstractSingleResult(ctrl *gomock.Controller) *MockAbstractSingleResult {
	mock := &MockAbstractSingleResult{ctrl: ctrl}
	mock.recorder = &MockAbstractSingleResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractSingleResult) EXPECT() *MockAbstractSingleResultMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockAbstractSingleResult) Decode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockAbstractSingleResultMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockAbstractSingleResult)(nil).Decode), v)
}

// Err mocks base method.
func (m *MockAbstractSingleResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockAbstractSingleResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockAbstractSingleResult)(nil).Err))
}
