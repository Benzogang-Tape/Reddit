// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	posts "github.com/Benzogang-Tape/Reddit/internal/models/posts"
	users "github.com/Benzogang-Tape/Reddit/internal/models/users"
	gomock "github.com/golang/mock/gomock"
)

// MockPostAPI is a mock of PostAPI interface.
type MockPostAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPostAPIMockRecorder
}

// MockPostAPIMockRecorder is the mock recorder for MockPostAPI.
type MockPostAPIMockRecorder struct {
	mock *MockPostAPI
}

// NewMockPostAPI creates a new mock instance.
func NewMockPostAPI(ctrl *gomock.Controller) *MockPostAPI {
	mock := &MockPostAPI{ctrl: ctrl}
	mock.recorder = &MockPostAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostAPI) EXPECT() *MockPostAPIMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostAPI) AddComment(ctx context.Context, postID users.ID, comment posts.Comment) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, postID, comment)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostAPIMockRecorder) AddComment(ctx, postID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostAPI)(nil).AddComment), ctx, postID, comment)
}

// CreatePost mocks base method.
func (m *MockPostAPI) CreatePost(ctx context.Context, postPayload posts.PostPayload) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, postPayload)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostAPIMockRecorder) CreatePost(ctx, postPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostAPI)(nil).CreatePost), ctx, postPayload)
}

// DeleteComment mocks base method.
func (m *MockPostAPI) DeleteComment(ctx context.Context, postID, commentID users.ID) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, postID, commentID)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostAPIMockRecorder) DeleteComment(ctx, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostAPI)(nil).DeleteComment), ctx, postID, commentID)
}

// DeletePost mocks base method.
func (m *MockPostAPI) DeletePost(ctx context.Context, postID users.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostAPIMockRecorder) DeletePost(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostAPI)(nil).DeletePost), ctx, postID)
}

// Downvote mocks base method.
func (m *MockPostAPI) Downvote(ctx context.Context, postID users.ID) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Downvote", ctx, postID)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downvote indicates an expected call of Downvote.
func (mr *MockPostAPIMockRecorder) Downvote(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downvote", reflect.TypeOf((*MockPostAPI)(nil).Downvote), ctx, postID)
}

// GetAllPosts mocks base method.
func (m *MockPostAPI) GetAllPosts(ctx context.Context) ([]*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx)
	ret0, _ := ret[0].([]*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostAPIMockRecorder) GetAllPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostAPI)(nil).GetAllPosts), ctx)
}

// GetPostByID mocks base method.
func (m *MockPostAPI) GetPostByID(ctx context.Context, postID users.ID) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, postID)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostAPIMockRecorder) GetPostByID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostAPI)(nil).GetPostByID), ctx, postID)
}

// GetPostsByCategory mocks base method.
func (m *MockPostAPI) GetPostsByCategory(ctx context.Context, postCategory posts.PostCategory) ([]*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", ctx, postCategory)
	ret0, _ := ret[0].([]*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockPostAPIMockRecorder) GetPostsByCategory(ctx, postCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockPostAPI)(nil).GetPostsByCategory), ctx, postCategory)
}

// GetPostsByUser mocks base method.
func (m *MockPostAPI) GetPostsByUser(ctx context.Context, userLogin users.Username) ([]*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUser", ctx, userLogin)
	ret0, _ := ret[0].([]*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUser indicates an expected call of GetPostsByUser.
func (mr *MockPostAPIMockRecorder) GetPostsByUser(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUser", reflect.TypeOf((*MockPostAPI)(nil).GetPostsByUser), ctx, userLogin)
}

// Unvote mocks base method.
func (m *MockPostAPI) Unvote(ctx context.Context, postID users.ID) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unvote", ctx, postID)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unvote indicates an expected call of Unvote.
func (mr *MockPostAPIMockRecorder) Unvote(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unvote", reflect.TypeOf((*MockPostAPI)(nil).Unvote), ctx, postID)
}

// Upvote mocks base method.
func (m *MockPostAPI) Upvote(ctx context.Context, postID users.ID) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upvote", ctx, postID)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upvote indicates an expected call of Upvote.
func (mr *MockPostAPIMockRecorder) Upvote(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upvote", reflect.TypeOf((*MockPostAPI)(nil).Upvote), ctx, postID)
}
