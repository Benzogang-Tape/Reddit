// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Login via login and password in reddit-clone app",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login to your account",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "User credentials for authentication",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.AuthUserInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authorized successfully",
                        "schema": {
                            "$ref": "#/definitions/jwt.Session"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Bad login or password",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/post/{POST_ID}": {
            "get": {
                "description": "Get information on a specific post by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "getting-posts"
                ],
                "summary": "Get a certain post",
                "operationId": "get-post-by-id",
                "parameters": [
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post successfully received",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad post id",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a specific post by its id",
                "tags": [
                    "managing-posts"
                ],
                "summary": "Delete a post",
                "operationId": "delete-post",
                "parameters": [
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "400": {
                        "description": "Bad post id",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/post/{POST_ID}/downvote": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Decrease post rating by 1 vote",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "voting-posts"
                ],
                "summary": "Vote down on a post",
                "operationId": "downvote-post",
                "parameters": [
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully downvoted",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad post id",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/post/{POST_ID}/unvote": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Withdraw your vote from the post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "voting-posts"
                ],
                "summary": "Cancel your vote",
                "operationId": "unvote-post",
                "parameters": [
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unvoted",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad post id",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/post/{POST_ID}/upvote": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Increase post rating by 1 vote",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "voting-posts"
                ],
                "summary": "Vote up on a post",
                "operationId": "upvote-post",
                "parameters": [
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully upvoted",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad post id",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/posts/": {
            "get": {
                "description": "Get a list of posts of all users and threads",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "getting-posts"
                ],
                "summary": "Get all posts",
                "operationId": "get-all-posts",
                "responses": {
                    "200": {
                        "description": "Posts successfully received",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.Post"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a post of a specific type, category, and content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "managing-posts"
                ],
                "summary": "Create a post",
                "operationId": "create-post",
                "parameters": [
                    {
                        "description": "Post data",
                        "name": "post_payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.PostPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Post successfully created",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad payload"
                    },
                    "422": {
                        "description": "Bad content",
                        "schema": {
                            "$ref": "#/definitions/errs.ComplexErrArr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/posts/{CATEGORY_NAME}": {
            "get": {
                "description": "Get all posts belonging to a certain category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "getting-posts"
                ],
                "summary": "Get posts by category",
                "operationId": "get-posts-by-category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "CATEGORY_NAME",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posts successfully received",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.Post"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad category(doesn't exist)",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/posts/{POST_ID}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Leave a comment under a certain post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commenting-posts"
                ],
                "summary": "Comment on the post",
                "operationId": "add-comment",
                "parameters": [
                    {
                        "description": "Comment data",
                        "name": "comment_payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.Comment"
                        }
                    },
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment successfully left",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad payload",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "422": {
                        "description": "Bad content",
                        "schema": {
                            "$ref": "#/definitions/errs.ComplexErrArr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/posts/{POST_ID}/{COMMENT_ID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a certain comment on a certain post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commenting-posts"
                ],
                "summary": "Delete comment",
                "operationId": "delete-comment",
                "parameters": [
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Post uuid",
                        "name": "POST_ID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "description": "Comment uuid",
                        "name": "COMMENT_ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad uuid",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "404": {
                        "description": "No posts or comment with the provided id were found",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register in reddit-clone app",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "User credentials for registration",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.AuthUserInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/jwt.Session"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "422": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/errs.ComplexErrArr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        },
        "/user/{USER_LOGIN}": {
            "get": {
                "description": "Get all posts of a certain user by his/her username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "getting-posts"
                ],
                "summary": "Get posts by user",
                "operationId": "get-posts-by-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of user",
                        "name": "USER_LOGIN",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posts successfully received",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.Post"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad username(doesn't exist)",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errs.SimpleErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errs.ComplexErr": {
            "description": "ComplexErr contains a more detailed description of the error, including the location and cause of the error",
            "type": "object",
            "properties": {
                "location": {
                    "description": "Any type"
                },
                "msg": {
                    "description": "Any type"
                },
                "param": {
                    "description": "Any type"
                },
                "value": {
                    "description": "Any type"
                }
            }
        },
        "errs.ComplexErrArr": {
            "description": "ComplexErrArr is an array of ComplexErr returned in case of a non-obvious error",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/errs.ComplexErr"
                    }
                }
            }
        },
        "errs.SimpleErr": {
            "description": "SimpleErr stores a brief description of an error",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Any type"
                }
            }
        },
        "jwt.Session": {
            "description": "Session stores the JWT token of the session",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzUyMzU3ODAsImlhdCI6MTczNDYzMDk4MCwidXNlciI6eyJ1c2VybmFtZSI6InRlc3RfdXNlciIsImlkIjoiZDNkNzc1YmEtYTFlZS00MTEwLTkwOTktMTA0ZDVkYzFkYzQ2In19.I_3_yHlH1QUuKavtx8xVN_IRFMYXg3dYumzSrImA_NM"
                }
            }
        },
        "jwt.TokenPayload": {
            "description": "TokenPayload stores the User payload contained in the JWT Session token",
            "type": "object",
            "properties": {
                "id": {
                    "description": "User id",
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 36,
                    "example": "12345678-9abc-def1-2345-6789abcdef12"
                },
                "username": {
                    "description": "User login",
                    "type": "string",
                    "example": "test_user"
                }
            }
        },
        "posts.Comment": {
            "description": "Comment contains the text of the comment on Post",
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "minLength": 4,
                    "example": "Some comment body example"
                }
            }
        },
        "posts.Post": {
            "description": "Post Contains all the information about a particular post in the app",
            "type": "object",
            "properties": {
                "author": {
                    "description": "User who created the Post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/jwt.TokenPayload"
                        }
                    ]
                },
                "category": {
                    "description": "Number of the category to which the Post belongs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostCategory"
                        }
                    ],
                    "example": 0
                },
                "comments": {
                    "description": "List of all comments left by users under the post",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/posts.PostComment"
                    }
                },
                "created": {
                    "description": "Date the Post was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2006-01-02T15:04:05.999Z"
                },
                "id": {
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 36,
                    "example": "12345678-9abc-def1-2345-6789abcdef12"
                },
                "score": {
                    "description": "The overall balance of the post's votes",
                    "type": "integer",
                    "example": -1
                },
                "text": {
                    "description": "Content of the Post",
                    "type": "string",
                    "minLength": 4,
                    "example": "Awesome text"
                },
                "title": {
                    "type": "string",
                    "example": "Awesome title"
                },
                "type": {
                    "description": "Post with text(1) or with a link(0)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostType"
                        }
                    ],
                    "example": 1
                },
                "upvotePercentage": {
                    "description": "Percentage of positive Votes to Post",
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 75
                },
                "url": {
                    "type": "string",
                    "example": "http://localhost:8080/"
                },
                "views": {
                    "description": "How many times the post has been viewed by users",
                    "type": "integer",
                    "example": 1
                },
                "votes": {
                    "description": "List of all the votes put by users on the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.Votes"
                        }
                    ]
                }
            }
        },
        "posts.PostCategory": {
            "description": "PostCategory is an integer representing the category to which post belongs",
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-varnames": [
                "Music",
                "Funny",
                "Videos",
                "Programming",
                "News",
                "Fashion"
            ]
        },
        "posts.PostComment": {
            "description": "PostComment contains all information about a specific comment on a Post",
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/jwt.TokenPayload"
                },
                "body": {
                    "description": "Content of the comment",
                    "type": "string",
                    "minLength": 4,
                    "example": "Some comment body example"
                },
                "created": {
                    "description": "Date the comment was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2006-01-02T15:04:05.999Z"
                },
                "id": {
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 36,
                    "example": "12345678-9abc-def1-2345-6789abcdef12"
                }
            }
        },
        "posts.PostPayload": {
            "description": "PostPayload contains the necessary information to create a post",
            "type": "object",
            "properties": {
                "category": {
                    "description": "Number of the category to which the Post belongs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostCategory"
                        }
                    ],
                    "example": 0
                },
                "text": {
                    "description": "Content of the Post",
                    "type": "string",
                    "minLength": 4,
                    "example": "Awesome text"
                },
                "title": {
                    "type": "string",
                    "example": "Awesome title"
                },
                "type": {
                    "description": "link or text",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostType"
                        }
                    ]
                },
                "url": {
                    "type": "string",
                    "example": "http://localhost:8080/"
                }
            }
        },
        "posts.PostType": {
            "description": "PostType is an integer(0 or 1) representing the type of the Post",
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "WithLink",
                "WithText"
            ]
        },
        "posts.PostVote": {
            "description": "PostVote is a structure storing user id and his/her Vote",
            "type": "object",
            "properties": {
                "user": {
                    "description": "ID of the user who left the comment",
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 36,
                    "example": "12345678-9abc-def1-2345-6789abcdef12"
                },
                "vote": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.Vote"
                        }
                    ],
                    "example": -1
                }
            }
        },
        "posts.Vote": {
            "description": "Vote is an integer(1 or -1) representing the user's reaction to the Post",
            "type": "integer",
            "enum": [
                -1,
                1
            ],
            "x-enum-varnames": [
                "downVote",
                "upVote"
            ]
        },
        "posts.Votes": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/posts.PostVote"
            }
        },
        "users.AuthUserInfo": {
            "description": "AuthUserInfo stores User credentials contained in the JWT Session token.",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "example": "want_pizza"
                },
                "username": {
                    "type": "string",
                    "example": "Valery_Albertovich"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Reddit-Clone API",
	Description:      "Basic restfull api for reddit-clone backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
